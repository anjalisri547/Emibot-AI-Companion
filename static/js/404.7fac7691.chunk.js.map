{"version":3,"file":"static/js/404.7fac7691.chunk.js","mappings":"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","sources":["components/Admin/AdminPage.jsx"],"sourcesContent":["\r\nimport { Helmet } from \"react-helmet\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./AdminPage.css\";\r\nimport { db } from \"../../Firebaseconfig\";\r\nimport { \r\n  collection, getDocs, deleteDoc, doc, \r\n  query, orderBy, addDoc, updateDoc, serverTimestamp \r\n} from \"firebase/firestore\";\r\n\r\nconst AdminPage = () => {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // States for three collections\r\n  const [userOfMonthMessages, setUserOfMonthMessages] = useState([]);\r\n  const [todayConversations, setTodayConversations] = useState([]);\r\n  const [communityLeaderComments, setCommunityLeaderComments] = useState([]);\r\n\r\n  // Form states\r\n  const [newUom, setNewUom] = useState({ name: \"\", text: \"\" });\r\n  const [editUomId, setEditUomId] = useState(null);\r\n\r\n  const [newConversation, setNewConversation] = useState({ user: \"\", bot: \"\" });\r\n  const [editConversationId, setEditConversationId] = useState(null);\r\n\r\n  const [newLeaderComment, setNewLeaderComment] = useState({ name: \"\", text: \"\" });\r\n  const [editLeaderId, setEditLeaderId] = useState(null);\r\n\r\n  // ================== FETCH FUNCTIONS ==================\r\n  const fetchAllData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Fetch User of Month Messages\r\n      const uomQ = query(collection(db, \"userOfMonthMessages\"), orderBy(\"createdAt\", \"desc\"));\r\n      const uomSnap = await getDocs(uomQ);\r\n      setUserOfMonthMessages(uomSnap.docs.map((d) => ({ id: d.id, ...d.data() })));\r\n\r\n      // Fetch Today Conversations\r\n      const convQ = query(collection(db, \"todayconversations\"), orderBy(\"createdAt\", \"desc\"));\r\n      const convSnap = await getDocs(convQ);\r\n      setTodayConversations(convSnap.docs.map((d) => ({ id: d.id, ...d.data() })));\r\n\r\n      // Fetch Community Leader Comments\r\n      const leaderQ = query(collection(db, \"communityLeaderComments\"), orderBy(\"createdAt\", \"desc\"));\r\n      const leaderSnap = await getDocs(leaderQ);\r\n      setCommunityLeaderComments(leaderSnap.docs.map((d) => ({ id: d.id, ...d.data() })));\r\n\r\n    } catch (err) {\r\n      console.error(\"Error fetching data:\", err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // ================== CRUD FUNCTIONS ==================\r\n  // ---- User of Month ----\r\n  const handleSubmitUom = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (editUomId) {\r\n        await updateDoc(doc(db, \"userOfMonthMessages\", editUomId), {\r\n          name: newUom.name,\r\n          text: newUom.text\r\n        });\r\n        setUserOfMonthMessages((prev) =>\r\n          prev.map((item) => (item.id === editUomId ? { ...item, ...newUom } : item))\r\n        );\r\n        setEditUomId(null);\r\n      } else {\r\n        await addDoc(collection(db, \"userOfMonthMessages\"), {\r\n          ...newUom,\r\n          createdAt: serverTimestamp()\r\n        });\r\n        fetchAllData();\r\n      }\r\n      setNewUom({ name: \"\", text: \"\" });\r\n    } catch (err) {\r\n      console.error(\"Error adding/updating userOfMonthMessages:\", err);\r\n    }\r\n  };\r\n  const handleDeleteUom = async (id) => {\r\n    if (!window.confirm(\"Delete this User of Month message?\")) return;\r\n    await deleteDoc(doc(db, \"userOfMonthMessages\", id));\r\n    setUserOfMonthMessages((prev) => prev.filter((item) => item.id !== id));\r\n  };\r\n  const handleEditUom = (item) => {\r\n    setNewUom({ name: item.name, text: item.text });\r\n    setEditUomId(item.id);\r\n  };\r\n\r\n  // ---- Today Conversations ----\r\n  const handleSubmitConversation = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (editConversationId) {\r\n        await updateDoc(doc(db, \"todayconversations\", editConversationId), {\r\n          user: newConversation.user,\r\n          bot: newConversation.bot\r\n        });\r\n        setTodayConversations((prev) =>\r\n          prev.map((c) => (c.id === editConversationId ? { ...c, ...newConversation } : c))\r\n        );\r\n        setEditConversationId(null);\r\n      } else {\r\n        await addDoc(collection(db, \"todayconversations\"), {\r\n          ...newConversation,\r\n          createdAt: serverTimestamp()\r\n        });\r\n        fetchAllData();\r\n      }\r\n      setNewConversation({ user: \"\", bot: \"\" });\r\n    } catch (err) {\r\n      console.error(\"Error adding/updating todayconversations:\", err);\r\n    }\r\n  };\r\n  const handleDeleteConversation = async (id) => {\r\n    if (!window.confirm(\"Delete this conversation?\")) return;\r\n    await deleteDoc(doc(db, \"todayconversations\", id));\r\n    setTodayConversations((prev) => prev.filter((c) => c.id !== id));\r\n  };\r\n  const handleEditConversation = (item) => {\r\n    setNewConversation({ user: item.user, bot: item.bot });\r\n    setEditConversationId(item.id);\r\n  };\r\n\r\n  // ---- Community Leader Comments ----\r\n  const handleSubmitLeader = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (editLeaderId) {\r\n        await updateDoc(doc(db, \"communityLeaderComments\", editLeaderId), {\r\n          name: newLeaderComment.name,\r\n          text: newLeaderComment.text\r\n        });\r\n        setCommunityLeaderComments((prev) =>\r\n          prev.map((c) => (c.id === editLeaderId ? { ...c, ...newLeaderComment } : c))\r\n        );\r\n        setEditLeaderId(null);\r\n      } else {\r\n        await addDoc(collection(db, \"communityLeaderComments\"), {\r\n          ...newLeaderComment,\r\n          createdAt: serverTimestamp()\r\n        });\r\n        fetchAllData();\r\n      }\r\n      setNewLeaderComment({ name: \"\", text: \"\" });\r\n    } catch (err) {\r\n      console.error(\"Error adding/updating communityLeaderComments:\", err);\r\n    }\r\n  };\r\n  const handleDeleteLeader = async (id) => {\r\n    if (!window.confirm(\"Delete this comment?\")) return;\r\n    await deleteDoc(doc(db, \"communityLeaderComments\", id));\r\n    setCommunityLeaderComments((prev) => prev.filter((c) => c.id !== id));\r\n  };\r\n  const handleEditLeader = (item) => {\r\n    setNewLeaderComment({ name: item.name, text: item.text });\r\n    setEditLeaderId(item.id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <Helmet>\r\n  <title>Admin Panel | EmiBot AI Companion</title>\r\n  <meta name=\"description\" content=\"Manage users, notes, and content from the admin panel.\" />\r\n  <meta name=\"robots\" content=\"noindex, nofollow\" />\r\n</Helmet>\r\n    <div className=\"admin-wrap\">\r\n      <h1 className=\"admin-title\">Admin Dashboard</h1>\r\n      {loading ? <p>Loading data...</p> : null}\r\n\r\n      {/* User of Month Section */}\r\n      <section>\r\n        <h2>User of Month Messages</h2>\r\n        <form onSubmit={handleSubmitUom}>\r\n          <input type=\"text\" placeholder=\"Name\"\r\n            value={newUom.name} onChange={(e)=>setNewUom({...newUom, name:e.target.value})} required />\r\n          <textarea placeholder=\"Message\"\r\n            value={newUom.text} onChange={(e)=>setNewUom({...newUom, text:e.target.value})} required />\r\n          <button type=\"submit\">{editUomId ? \"Update\" : \"Add\"}</button>\r\n          {editUomId && <button type=\"button\" onClick={()=>{setEditUomId(null); setNewUom({name:\"\", text:\"\"});}}>Cancel</button>}\r\n        </form>\r\n        <ul>\r\n          {userOfMonthMessages.map((item)=>(\r\n            <li key={item.id}>\r\n              <strong>{item.name}</strong>: {item.text}\r\n              <button onClick={()=>handleEditUom(item)}>Edit</button>\r\n              <button onClick={()=>handleDeleteUom(item.id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n\r\n      {/* Today Conversations Section */}\r\n      <section>\r\n        <h2>Today Conversations</h2>\r\n        <form onSubmit={handleSubmitConversation}>\r\n          <input type=\"text\" placeholder=\"User Message\"\r\n            value={newConversation.user} onChange={(e)=>setNewConversation({...newConversation, user:e.target.value})} required />\r\n          <input type=\"text\" placeholder=\"Bot Response\"\r\n            value={newConversation.bot} onChange={(e)=>setNewConversation({...newConversation, bot:e.target.value})} required />\r\n          <button type=\"submit\">{editConversationId ? \"Update\" : \"Add\"}</button>\r\n          {editConversationId && <button type=\"button\" onClick={()=>{setEditConversationId(null); setNewConversation({user:\"\", bot:\"\"});}}>Cancel</button>}\r\n        </form>\r\n        <ul>\r\n          {todayConversations.map((c)=>(\r\n            <li key={c.id}>\r\n              <strong>User:</strong> {c.user}<br/>\r\n              <strong>Bot:</strong> {c.bot}\r\n              <button onClick={()=>handleEditConversation(c)}>Edit</button>\r\n              <button onClick={()=>handleDeleteConversation(c.id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n\r\n      {/* Community Leader Comments Section */}\r\n      <section>\r\n        <h2>Community Leader Comments</h2>\r\n        <form onSubmit={handleSubmitLeader}>\r\n          <input type=\"text\" placeholder=\"Name\"\r\n            value={newLeaderComment.name} onChange={(e)=>setNewLeaderComment({...newLeaderComment, name:e.target.value})} required />\r\n          <textarea placeholder=\"Comment\"\r\n            value={newLeaderComment.text} onChange={(e)=>setNewLeaderComment({...newLeaderComment, text:e.target.value})} required />\r\n          <button type=\"submit\">{editLeaderId ? \"Update\" : \"Add\"}</button>\r\n          {editLeaderId && <button type=\"button\" onClick={()=>{setEditLeaderId(null); setNewLeaderComment({name:\"\", text:\"\"});}}>Cancel</button>}\r\n        </form>\r\n        <ul>\r\n          {communityLeaderComments.map((c)=>(\r\n            <li key={c.id}>\r\n              <strong>{c.name}</strong>: {c.text}\r\n              <button onClick={()=>handleEditLeader(c)}>Edit</button>\r\n              <button onClick={()=>handleDeleteLeader(c.id)}>Delete</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n"],"names":["AdminPage","loading","setLoading","useState","userOfMonthMessages","setUserOfMonthMessages","todayConversations","setTodayConversations","communityLeaderComments","setCommunityLeaderComments","newUom","setNewUom","name","text","editUomId","setEditUomId","newConversation","setNewConversation","user","bot","editConversationId","setEditConversationId","newLeaderComment","setNewLeaderComment","editLeaderId","setEditLeaderId","fetchAllData","async","uomQ","query","collection","db","orderBy","uomSnap","getDocs","docs","map","d","_objectSpread","id","data","convQ","convSnap","leaderQ","leaderSnap","err","console","error","useEffect","_jsxs","_Fragment","children","Helmet","_jsx","content","className","onSubmit","e","preventDefault","updateDoc","doc","prev","item","addDoc","createdAt","serverTimestamp","type","placeholder","value","onChange","target","required","onClick","handleEditUom","window","confirm","deleteDoc","filter","handleDeleteUom","c","handleEditConversation","handleDeleteConversation","handleEditLeader","handleDeleteLeader"],"sourceRoot":""}