{"version":3,"file":"static/js/633.33a05df9.chunk.js","mappings":"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","sources":["components/Userofmonth/UserOfMonth.jsx"],"sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./UserOfMonth.css\";\r\nimport { db } from \"../../Firebaseconfig\"; // Firestore import\r\nimport { collection, addDoc, getDocs, query, orderBy, serverTimestamp } from \"firebase/firestore\";\r\n\r\nconst UserOfMonth = () => {\r\n  const user = {\r\n    name: \"Aarav Sharma\",\r\n    image: \"https://i.pinimg.com/736x/44/aa/99/44aa998d09afa45bbd489f3af6fdb7f4.jpg\",\r\n    bio: \"An active contributor to the EmiBot community, Aarav has shared innovative ideas, written guides, and helped new users get started with confidence.\",\r\n    achievements: [\r\n      \"Created 5 detailed tutorials for EmiBot\",\r\n      \"Helped 120+ members in the forums\",\r\n      \"Suggested features adopted into EmiBot updates\",\r\n    ],\r\n    socials: {\r\n      twitter: \"https://twitter.com/\",\r\n      linkedin: \"https://linkedin.com/\",\r\n      github: \"https://github.com/\",\r\n    },\r\n  };\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  // Fetch messages from Firestore on mount\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const q = query(collection(db, \"userOfMonthMessages\"), orderBy(\"createdAt\", \"desc\"));\r\n        const snapshot = await getDocs(q);\r\n        const fetchedNotes = snapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setNotes(fetchedNotes);\r\n      } catch (error) {\r\n        console.error(\"Error fetching messages:\", error);\r\n      }\r\n    };\r\n    fetchMessages();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!message.trim()) return;\r\n\r\n    const newNote = {\r\n      name: name.trim() || \"Anonymous\",\r\n      text: message.trim(),\r\n      createdAt: serverTimestamp(),\r\n    };\r\n\r\n    try {\r\n      const docRef = await addDoc(collection(db, \"userOfMonthMessages\"), newNote);\r\n      setNotes([{ id: docRef.id, ...newNote }, ...notes]);\r\n      setName(\"\");\r\n      setMessage(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error saving message to Firebase:\", error);\r\n      alert(\"Failed to save message. Check Firebase permissions.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"uom-wrap\">\r\n      <div className=\"uom-card\">\r\n        <img src={user.image} alt={user.name} className=\"uom-image\" />\r\n        <h1 className=\"uom-name\">{user.name}</h1>\r\n        <p className=\"uom-bio\">{user.bio}</p>\r\n\r\n        <h2 className=\"uom-section-title\">Key Achievements</h2>\r\n        <ul className=\"uom-achievements\">\r\n          {user.achievements.map((a, idx) => (\r\n            <li key={idx}>{a}</li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className=\"uom-socials\">\r\n          <a href={user.socials.twitter} target=\"_blank\" rel=\"noreferrer\">Twitter</a>\r\n          <a href={user.socials.linkedin} target=\"_blank\" rel=\"noreferrer\">LinkedIn</a>\r\n          <a href={user.socials.github} target=\"_blank\" rel=\"noreferrer\">GitHub</a>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"uom-card\">\r\n        <h2 className=\"uom-section-title\">Leave a Message</h2>\r\n        <form className=\"uom-form\" onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Your Name (optional)\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className=\"uom-input\"\r\n          />\r\n          <textarea\r\n            placeholder=\"Write your message...\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            className=\"uom-textarea\"\r\n          />\r\n          <button type=\"submit\" className=\"uom-btn\">Post Message</button>\r\n        </form>\r\n\r\n        <h3 className=\"uom-section-title\">Messages for {user.name}</h3>\r\n        <ul className=\"uom-notes\">\r\n          {notes.map((note) => (\r\n            <li key={note.id} className=\"uom-note\">\r\n              <div className=\"uom-avatar\">{(note.name || \"A\").charAt(0).toUpperCase()}</div>\r\n              <div>\r\n                <strong>{note.name}</strong>\r\n                <p>{note.text}</p>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserOfMonth;\r\n"],"names":["UserOfMonth","user","name","image","bio","achievements","socials","twitter","linkedin","github","setName","useState","message","setMessage","notes","setNotes","useEffect","async","q","query","collection","db","orderBy","fetchedNotes","getDocs","docs","map","doc","_objectSpread","id","data","error","console","fetchMessages","_jsxs","className","children","_jsx","src","alt","a","idx","href","target","rel","onSubmit","e","preventDefault","trim","newNote","text","createdAt","serverTimestamp","docRef","addDoc","alert","type","placeholder","value","onChange","note","charAt","toUpperCase"],"sourceRoot":""}