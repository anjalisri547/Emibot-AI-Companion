{"version":3,"file":"static/js/597.c88af203.chunk.js","mappings":"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","sources":["components/chatbot/Chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\";\r\nimport { db } from \"../../Firebaseconfig\";\r\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\r\n\r\nconst Chatbot = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [chatLog, setChatLog] = useState([]);\r\n  const [userName, setUserName] = useState(\"\"); // store user's name\r\n\r\n  const predefinedQA = {\r\n    \"what can emibot do\": \"EmiBot can chat, suggest features, remember preferences, and help you connect with the community.\",\r\n    \"how do i customize emibot\": \"You can go to the Customize page and personalize your avatar, theme, and interactions.\",\r\n    \"is emibot safe for kids\": \"Yes, EmiBot is designed to provide safe, monitored interactions suitable for all users.\",\r\n    \"can emibot help me learn\": \"Absolutely! EmiBot can suggest learning resources, tips, and track your progress.\",\r\n    \"does emibot remember my preferences\": \"Yes, EmiBot stores your choices to provide personalized experiences.\"\r\n  };\r\n\r\n  const suggestedQuestions = Object.keys(predefinedQA);\r\n\r\n  const handleNext = async (customMessage = null) => {\r\n    const input = customMessage || message;\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = input.trim().toLowerCase();\r\n    let answer = \"\";\r\n\r\n    // Personalized greeting logic\r\n    if (userMessage === \"hi\" || userMessage === \"hello\" || userMessage.includes(\"how are you\")) {\r\n      answer = !userName\r\n        ? \"Hello! What's your name?\"\r\n        : `Hi ${userName}! I'm good, thank you. How about you?`;\r\n    } \r\n    else if (userMessage.startsWith(\"my name is\")) {\r\n      const name = input.trim().split(\"my name is\")[1]?.trim();\r\n      if (name) {\r\n        setUserName(name);\r\n        answer = `Nice to meet you, ${name}! How can I help you today?`;\r\n      } else {\r\n        answer = \"I didn't catch your name. Could you repeat it?\";\r\n      }\r\n    }\r\n    else if (!userName && /^[a-zA-Z]+$/.test(userMessage)) {\r\n      setUserName(input.trim());\r\n      answer = `Nice to meet you, ${input.trim()}! How can I help you today?`;\r\n    }\r\n    else {\r\n      // Keyword-based matching\r\n      if (userMessage.includes(\"emibot\") && userMessage.includes(\"do\"))\r\n        answer = predefinedQA[\"what can emibot do\"];\r\n      else if (userMessage.includes(\"customize\"))\r\n        answer = predefinedQA[\"how do i customize emibot\"];\r\n      else if (userMessage.includes(\"safe\") || userMessage.includes(\"kids\"))\r\n        answer = predefinedQA[\"is emibot safe for kids\"];\r\n      else if (userMessage.includes(\"learn\"))\r\n        answer = predefinedQA[\"can emibot help me learn\"];\r\n      else if (userMessage.includes(\"remember\") || userMessage.includes(\"preferences\"))\r\n        answer = predefinedQA[\"does emibot remember my preferences\"];\r\n      else\r\n        answer = \"Sorry, I don't have an answer for that yet. We'll get back to you!\";\r\n    }\r\n\r\n    console.log(\"User:\", input, \"Bot:\", answer);\r\n\r\n    setChatLog(prev => [...prev, { question: input, answer }]);\r\n    setMessage(\"\");\r\n\r\n    try {\r\n      await addDoc(collection(db, \"chatbotLogs\"), {\r\n        question: input,\r\n        answer,\r\n        timestamp: Timestamp.now(),\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Error saving to Firebase:\", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-wrapper\">\r\n      {!isOpen && (\r\n        <button className=\"chatbot-toggle\" onClick={() => setIsOpen(true)}>\r\n          ðŸ¤–\r\n        </button>\r\n      )}\r\n\r\n      {isOpen && (\r\n        <div className=\"chatbot-box\">\r\n          <div className=\"chatbot-header\">\r\n            <h4>Ask EmiBot AI anything!</h4>\r\n            <button className=\"close-btn\" onClick={() => setIsOpen(false)}>âœ•</button>\r\n          </div>\r\n\r\n          {/* Suggested Questions */}\r\n          <div className=\"chatbot-suggestions\">\r\n            {suggestedQuestions.map((q, idx) => (\r\n              <button \r\n                key={idx} \r\n                className=\"suggestion-btn\"\r\n                onClick={() => handleNext(q)}\r\n              >\r\n                {q}\r\n              </button>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"chatbot-messages\">\r\n            {chatLog.map((chat, idx) => (\r\n              <div key={idx}>\r\n                <div className=\"chat-msg user\"><strong>You:</strong> {chat.question}</div>\r\n                <div className=\"chat-msg bot\"><strong>EmiBot:</strong> {chat.answer}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"chatbot-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type your question...\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyDown={(e) => e.key === \"Enter\" && handleNext()}\r\n            />\r\n            <button onClick={() => handleNext()}>ASK</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"names":["Chatbot","isOpen","setIsOpen","useState","message","setMessage","chatLog","setChatLog","userName","setUserName","predefinedQA","suggestedQuestions","Object","keys","handleNext","async","input","arguments","length","undefined","trim","userMessage","toLowerCase","answer","includes","concat","startsWith","_input$trim$split$","name","split","test","console","log","prev","question","addDoc","collection","db","timestamp","Timestamp","now","err","error","_jsxs","className","children","_jsx","onClick","map","q","idx","chat","type","placeholder","value","onChange","e","target","onKeyDown","key"],"sourceRoot":""}