{"version":3,"file":"static/js/979.0e4f5568.chunk.js","mappings":"qLAMA,MAsGA,EAtGiBA,KACf,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAAWC,IAAgBN,EAAAA,EAAAA,WAAS,IAG3CO,EAAAA,EAAAA,WAAU,KACWC,WACjB,IACE,MAAMC,GAAIC,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,oBAAoBC,EAAAA,EAAAA,IAAQ,YAAa,SAElEC,SADiBC,EAAAA,EAAAA,IAAQN,IACDO,KAAKC,IAAIC,IAAGC,EAAAA,EAAAA,GAAA,CACxCC,GAAIF,EAAIE,IACLF,EAAIG,SAETjB,EAASU,EACX,CAAE,MAAOQ,GACPC,QAAQC,MAAM,2BAA4BF,EAC5C,GAEFG,IACC,IAyBH,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,WAAUC,SAAC,sCACzBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,SAAQC,SAAC,wFAKtBF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,UAAUG,SAhCXtB,UAEnB,GADAuB,EAAEC,kBACG/B,EAAQgC,OAAQ,OAErB,MAAMC,EAAU,CACdpC,KAAMA,EAAKmC,QAAU,YACrBE,KAAMlC,EAAQgC,OACdG,WAAWC,EAAAA,EAAAA,OAGb,IACE,MAAMC,QAAeC,EAAAA,EAAAA,KAAO5B,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,mBAAoBsB,GAC/D9B,EAAS,EAAAe,EAAAA,EAAAA,GAAA,CAAGC,GAAIkB,EAAOlB,IAAOc,MAAc/B,IAC5CJ,EAAQ,IACRG,EAAW,IACXI,GAAa,GACbkC,WAAW,IAAMlC,GAAa,GAAQ,KACxC,CAAE,MAAOkB,GACPD,QAAQC,MAAM,yBAA0BA,GACxCiB,MAAM,wDACR,GAYqDb,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,SACEa,KAAK,OACLC,YAAY,uBACZC,MAAO9C,EACP+C,SAAWd,GAAMhC,EAAQgC,EAAEe,OAAOF,OAClCjB,UAAU,WACV,aAAW,eAEbE,EAAAA,EAAAA,KAAA,YACEc,YAAY,8BACZC,MAAO3C,EACP4C,SAAWd,GAAM7B,EAAW6B,EAAEe,OAAOF,OACrCjB,UAAU,cACV,aAAW,sBAEbE,EAAAA,EAAAA,KAAA,UAAQa,KAAK,SAASf,UAAU,SAAQC,SAAC,oBACxCvB,IAAawB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAAC,oDAI9CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,4BACZ,IAAjBzB,EAAM4C,QACLlB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,WAAUC,SAAC,+DAExBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,WAAUC,SACrBzB,EAAMc,IAAK+B,IACVtB,EAAAA,EAAAA,MAAA,MAAeC,UAAU,UAASC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UAAGoB,EAAElD,MAAQ,KAAKmD,OAAO,GAAGC,iBACtDxB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAEoB,EAAElD,QAClC+B,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,8BAEjCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,eAAcC,SAAEoB,EAAEb,YAP1Ba,EAAE5B,a","sources":["components/ThankYou/ThankYou.jsx"],"sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./ThankYou.css\";\r\nimport { db } from \"../../Firebaseconfig\";\r\nimport { collection, addDoc, getDocs, query, orderBy, serverTimestamp } from \"firebase/firestore\";\r\n\r\nconst ThankYou = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [notes, setNotes] = useState([]);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  // Fetch feedback on load\r\n  useEffect(() => {\r\n    const fetchNotes = async () => {\r\n      try {\r\n        const q = query(collection(db, \"websiteFeedback\"), orderBy(\"createdAt\", \"desc\"));\r\n        const snapshot = await getDocs(q);\r\n        const fetchedNotes = snapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setNotes(fetchedNotes);\r\n      } catch (err) {\r\n        console.error(\"Error fetching feedback:\", err);\r\n      }\r\n    };\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!message.trim()) return;\r\n\r\n    const newNote = {\r\n      name: name.trim() || \"Anonymous\",\r\n      text: message.trim(),\r\n      createdAt: serverTimestamp(),\r\n    };\r\n\r\n    try {\r\n      const docRef = await addDoc(collection(db, \"websiteFeedback\"), newNote);\r\n      setNotes([{ id: docRef.id, ...newNote }, ...notes]);\r\n      setName(\"\");\r\n      setMessage(\"\");\r\n      setSubmitted(true);\r\n      setTimeout(() => setSubmitted(false), 2500);\r\n    } catch (error) {\r\n      console.error(\"Error saving feedback:\", error);\r\n      alert(\"Could not save feedback. Please check Firebase rules.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ty-wrap\">\r\n      <div className=\"ty-card\">\r\n        <h1 className=\"ty-title\">ðŸŒŸ Share Your Feedback</h1>\r\n        <p className=\"ty-sub\">\r\n          Help us make this website even better!  \r\n          Share what you love or what we can improve.\r\n        </p>\r\n\r\n        <form className=\"ty-form\" onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Your Name (optional)\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className=\"ty-input\"\r\n            aria-label=\"Your Name\"\r\n          />\r\n          <textarea\r\n            placeholder=\"Write your feedback here...\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            className=\"ty-textarea\"\r\n            aria-label=\"Website feedback\"\r\n          />\r\n          <button type=\"submit\" className=\"ty-btn\">Submit Feedback</button>\r\n          {submitted && <div className=\"ty-success\">Thanks for helping us grow! ðŸš€</div>}\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"ty-list\">\r\n        <h2 className=\"ty-list-title\">Community Feedback Wall</h2>\r\n        {notes.length === 0 ? (\r\n          <p className=\"ty-empty\">No feedback yetâ€”be the first to share your thoughts!</p>\r\n        ) : (\r\n          <ul className=\"ty-notes\">\r\n            {notes.map((n) => (\r\n              <li key={n.id} className=\"ty-note\">\r\n                <div className=\"ty-avatar\">{(n.name || \"A\").charAt(0).toUpperCase()}</div>\r\n                <div className=\"ty-note-body\">\r\n                  <div className=\"ty-note-head\">\r\n                    <span className=\"ty-note-name\">{n.name}</span>\r\n                    <span className=\"ty-note-time\">ðŸ’¬ Feedback</span>\r\n                  </div>\r\n                  <p className=\"ty-note-text\">{n.text}</p>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThankYou;\r\n"],"names":["ThankYou","name","setName","useState","message","setMessage","notes","setNotes","submitted","setSubmitted","useEffect","async","q","query","collection","db","orderBy","fetchedNotes","getDocs","docs","map","doc","_objectSpread","id","data","err","console","error","fetchNotes","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","trim","newNote","text","createdAt","serverTimestamp","docRef","addDoc","setTimeout","alert","type","placeholder","value","onChange","target","length","n","charAt","toUpperCase"],"sourceRoot":""}