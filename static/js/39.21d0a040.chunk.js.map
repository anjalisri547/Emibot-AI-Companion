{"version":3,"file":"static/js/39.21d0a040.chunk.js","mappings":"uMAYA,MAAMA,EAAe,CAAC,gCAAiC,2BAwHvD,EAtHmBC,KACjB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAClCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,IAqEnC,OAEEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKN,EAAW,eAAiB,iBACjCI,EAAAA,EAAAA,MAAA,QAAMI,SAvEcC,UACtBC,EAAEC,iBACF,IACE,GAAIX,EAAU,CAEZ,IAAKP,EAAamB,SAASjB,GAEzB,YADAQ,EAAS,4DAGX,MAAMU,QAAiBC,EAAAA,EAAAA,IAA+BC,EAAAA,GAAMpB,EAAOG,SAE7DkB,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASL,EAASM,KAAKC,KAAM,CAChDzB,MAAOA,EACP0B,KAAM,UAERC,MAAM,sCACR,KAAO,CACL,MAAMC,QAAuBC,EAAAA,EAAAA,IAA2BT,EAAAA,GAAMpB,EAAOG,GAErE,IAAKL,EAAamB,SAASW,EAAeJ,KAAKxB,OAE7C,YADAQ,EAAS,yCAGb,CACAsB,OAAOC,SAASC,KAAO,QACzB,CAAE,MAAOC,GACPzB,EAASyB,EAAIC,QACf,GA4CmCxB,UAAU,YAAWC,SAAA,EACpDC,EAAAA,EAAAA,KAAA,SACEuB,KAAK,QACLC,YAAY,cACZC,MAAOrC,EACPsC,SAAWvB,GAAMd,EAASc,EAAEwB,OAAOF,OACnCG,UAAQ,KAEV5B,EAAAA,EAAAA,KAAA,SACEuB,KAAK,WACLC,YAAY,yBACZC,MAAOlC,EACPmC,SAAWvB,GAAMX,EAAYW,EAAEwB,OAAOF,OACtCG,UAAQ,KAEV5B,EAAAA,EAAAA,KAAA,UAAQuB,KAAK,SAAQxB,SAAEN,EAAW,SAAW,cAG/CO,EAAAA,EAAAA,KAAA,KACEF,UAAU,cACV+B,QAASA,KAAQnC,GAAaD,GAAWG,EAAS,KAAOG,SAExDN,EACG,sCACA,wCAGNO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,QAC9BC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,qBAAqB+B,QArEjB3B,UACxB,IACE,MAAM4B,EAAW,IAAIC,EAAAA,GACfC,QAAeC,EAAAA,EAAAA,IAAgBzB,EAAAA,GAAMsB,GAC3C,IAAK5C,EAAamB,SAAS2B,EAAOpB,KAAKxB,OAErC,YADAQ,EAAS,yDAILa,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASqB,EAAOpB,KAAKC,KAAM,CAC9CzB,MAAO4C,EAAOpB,KAAKxB,MACnB0B,KAAM,SACL,CAAEoB,OAAO,IACZhB,OAAOC,SAASC,KAAO,QACzB,CAAE,MAAOC,GACPzB,EAASyB,EAAIC,QACf,GAqDoEvB,SAAC,0BAGnEC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,uBAAuB+B,QArDjB3B,UAC1B,IACE,MAAM4B,EAAW,IAAIK,EAAAA,GACfH,QAAeC,EAAAA,EAAAA,IAAgBzB,EAAAA,GAAMsB,GAC3C,IAAK5C,EAAamB,SAAS2B,EAAOpB,KAAKxB,OAErC,YADAQ,EAAS,2DAGLa,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASqB,EAAOpB,KAAKC,KAAM,CAC9CzB,MAAO4C,EAAOpB,KAAKxB,MACnB0B,KAAM,SACL,CAAEoB,OAAO,IACZhB,OAAOC,SAASC,KAAO,QACzB,CAAE,MAAOC,GACPzB,EAASyB,EAAIC,QACf,GAsCwEvB,SAAC,2BAItEJ,IAASK,EAAAA,EAAAA,KAAA,KAAGF,UAAU,aAAYC,SAAEJ,O","sources":["components/Admin/AdminLogin.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { \r\n  signInWithEmailAndPassword, \r\n  createUserWithEmailAndPassword,\r\n  GoogleAuthProvider,\r\n  FacebookAuthProvider,\r\n  signInWithPopup\r\n} from \"firebase/auth\";\r\nimport { auth, db } from \"../../Firebaseconfig\";\r\nimport { setDoc, doc } from \"firebase/firestore\";\r\nimport \"./Auth.css\";\r\n\r\nconst ADMIN_EMAILS = [\"srivastavaanjali547@gmail.com\", \"secondadmin@example.com\"];\r\n\r\nconst AdminLogin = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isSignup, setIsSignup] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const handleEmailAuth = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (isSignup) {\r\n        // Only allow signup if email is in the admin list\r\n        if (!ADMIN_EMAILS.includes(email)) {\r\n          setError(\"This email is not authorized to create an admin account.\");\r\n          return;\r\n        }\r\n        const userCred = await createUserWithEmailAndPassword(auth, email, password);\r\n        // Write admin role to Firestore\r\n        await setDoc(doc(db, \"users\", userCred.user.uid), {\r\n          email: email,\r\n          role: \"admin\"\r\n        });\r\n        alert(\"Admin account created successfully!\");\r\n      } else {\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n        // Block login if not admin email\r\n        if (!ADMIN_EMAILS.includes(userCredential.user.email)) {\r\n          setError(\"This email is not authorized as admin.\");\r\n          return;\r\n        }\r\n      }\r\n      window.location.href = \"/admin\";\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogin = async () => {\r\n    try {\r\n      const provider = new GoogleAuthProvider();\r\n      const result = await signInWithPopup(auth, provider);\r\n      if (!ADMIN_EMAILS.includes(result.user.email)) {\r\n        setError(\"This Google account is not authorized as admin.\");\r\n        return;\r\n      }\r\n      // Store admin info to Firestore (optional, if you want to persist role)\r\n      await setDoc(doc(db, \"users\", result.user.uid), {\r\n        email: result.user.email,\r\n        role: \"admin\"\r\n      }, { merge: true });\r\n      window.location.href = \"/admin\";\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleFacebookLogin = async () => {\r\n    try {\r\n      const provider = new FacebookAuthProvider();\r\n      const result = await signInWithPopup(auth, provider);\r\n      if (!ADMIN_EMAILS.includes(result.user.email)) {\r\n        setError(\"This Facebook account is not authorized as admin.\");\r\n        return;\r\n      }\r\n      await setDoc(doc(db, \"users\", result.user.uid), {\r\n        email: result.user.email,\r\n        role: \"admin\"\r\n      }, { merge: true });\r\n      window.location.href = \"/admin\";\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n \r\n    <div className=\"auth-container\">\r\n      <h2>{isSignup ? \"Admin Signup\" : \"Admin Login\"}</h2>\r\n      <form onSubmit={handleEmailAuth} className=\"auth-form\">\r\n        <input \r\n          type=\"email\" \r\n          placeholder=\"Admin Email\" \r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)} \r\n          required \r\n        />\r\n        <input \r\n          type=\"password\" \r\n          placeholder=\"Password (min 6 chars)\" \r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)} \r\n          required \r\n        />\r\n        <button type=\"submit\">{isSignup ? \"Signup\" : \"Login\"}</button>\r\n      </form>\r\n\r\n      <p \r\n        className=\"auth-toggle\"\r\n        onClick={() => { setIsSignup(!isSignup); setError(\"\"); }}\r\n      >\r\n        {isSignup \r\n          ? \"Already have an account? Login here\" \r\n          : \"Don't have an account? Signup here\"}\r\n      </p>\r\n\r\n      <div className=\"auth-divider\">OR</div>\r\n      <button className=\"auth-social google\" onClick={handleGoogleLogin}>\r\n        Continue with Google\r\n      </button>\r\n      <button className=\"auth-social facebook\" onClick={handleFacebookLogin}>\r\n        Continue with Facebook\r\n      </button>\r\n\r\n      {error && <p className=\"auth-error\">{error}</p>}\r\n    </div>\r\n   \r\n  );\r\n};\r\n\r\nexport default AdminLogin;\r\n"],"names":["ADMIN_EMAILS","AdminLogin","email","setEmail","useState","password","setPassword","isSignup","setIsSignup","error","setError","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","includes","userCred","createUserWithEmailAndPassword","auth","setDoc","doc","db","user","uid","role","alert","userCredential","signInWithEmailAndPassword","window","location","href","err","message","type","placeholder","value","onChange","target","required","onClick","provider","GoogleAuthProvider","result","signInWithPopup","merge","FacebookAuthProvider"],"sourceRoot":""}