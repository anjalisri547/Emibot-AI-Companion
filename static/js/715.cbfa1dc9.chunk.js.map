{"version":3,"file":"static/js/715.cbfa1dc9.chunk.js","mappings":"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","sources":["components/Chat/Chathead.jsx","components/Chat/ChatHistory.jsx","components/Chat/ChatPage.jsx"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { BotProfileContext } from \"../../context/BotProfileContext\";\r\n\r\nconst ChatHead = () => {\r\n  const { botProfile } = useContext(BotProfileContext); // get global bot profile\r\n\r\n  return (\r\n    <div\r\n      className=\"chat-header\"\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        gap: \"10px\",\r\n        marginBottom: \"20px\",\r\n      }}\r\n    >\r\n      <img\r\n        src={\r\n          botProfile ||\r\n          \"https://platform.theverge.com/wp-content/uploads/sites/2/2025/07/GuykGKRW4AEwqzV.jpeg?quality=90&strip=all&crop=7.8125,0,84.375,100\"\r\n        }\r\n        alt=\"Bot\"\r\n        style={{\r\n          width: \"50px\",\r\n          height: \"50px\",\r\n          borderRadius: \"50%\",\r\n          objectFit: \"cover\",\r\n          color: \"white\",\r\n        }}\r\n      />\r\n      <h2 style={{ margin: 0, color: \"white\" }}>Emibot</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatHead;\r\n","import React from \"react\";\r\nimport \"./ChatHistory.css\";\r\n\r\nexport default function Chat1() {\r\n  return (\r\n    <div className=\"emibot-container\">\r\n      <section className=\"feature-section\">\r\n        <h2 className=\"section-title\">Chat History</h2>\r\n        <p className=\"section-subtitle\">\r\n          Access your previous conversations with EmiBot seamlessly.\r\n        </p>\r\n        <div className=\"feature-grid\">\r\n          <div className=\"feature-card\">\r\n            <img src=\"https://cdn.dribbble.com/userupload/15356746/file/original-25a4d4a53993b6d39782585fb1a34331.png?format=webp&resize=400x300&vertical=center\" alt=\"Review Past Chats\" />\r\n            <h3>Review Past Chats</h3>\r\n            <p>\r\n              Easily navigate through your past interactions with EmiBot to recall important discussions and insights.\r\n            </p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <img src=\"https://img.freepik.com/premium-vector/key-success-flat-design-concept-illustration_1207-608.jpg?semt=ais_hybrid&w=740&q=80\" alt=\"Pinned Key Facts\" />\r\n            <h3>Pinned Key Facts</h3>\r\n            <p>\r\n              Keep track of essential information such as birthdays and favorites by pinning key facts for quick access.\r\n            </p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <img src=\"https://www.shutterstock.com/image-vector/brainshaped-circuit-board-chip-artificial-260nw-2485613051.jpg\" alt=\"Contextual Memory\" />\r\n            <h3>Contextual Memory</h3>\r\n            <p>\r\n              EmiBot remembers the context of your conversations, allowing for a more personalized and engaging chat experience.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"feature-section\">\r\n        <h2 className=\"section-title\">Mood System</h2>\r\n        <p className=\"section-subtitle\">\r\n          Experience EmiBotâ€™s dynamic responses through its interactive mood system.\r\n        </p>\r\n        <div className=\"feature-grid\">\r\n          <div className=\"feature-card\">\r\n            <h3>Adaptive Expressions</h3>\r\n            <p>\r\n              EmiBot's avatar changes its face and emoji based on the sentiment of your conversation, making interactions feel more relatable.\r\n            </p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <h3>Sentiment Mapping</h3>\r\n            <p>\r\n              A simple JSON mapping allows EmiBot to correlate your mood with specific avatar expressions, enhancing the emotional connection.\r\n            </p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <h3>Engaging Feedback</h3>\r\n            <p>\r\n              Receive personalized feedback from EmiBot that reflects its mood, adding depth and engagement to your chats.\r\n            </p>\r\n          </div>\r\n          <div className=\"feature-card\">\r\n            <h3>Emotional Awareness</h3>\r\n            <p>\r\n              EmiBot is designed to recognize and adapt to your emotional tone, creating a more empathetic conversational partner.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","\r\nimport { Helmet } from \"react-helmet\";\r\nimport Chathead from \"./Chathead\";\r\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Chat1 from \"./ChatHistory\";\r\n\r\nimport { BotProfileContext } from \"../../context/BotProfileContext\";\r\n\r\n\r\n\r\nconst ChatPage = () => {\r\n  const location = useLocation();\r\n  const selectedAvatarFromHome = location.state?.selectedAvatar;\r\n\r\n  const { botProfile, setBotProfile } = useContext(BotProfileContext); // global state\r\n\r\n  // If navigated with selected avatar, update global profile\r\n  useEffect(() => {\r\n    if (selectedAvatarFromHome) {\r\n      setBotProfile(selectedAvatarFromHome);\r\n    }\r\n  }, [selectedAvatarFromHome, setBotProfile]);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const chatEndRef = useRef(null);\r\n\r\n  const sendMessage = async (text) => {\r\n    try {\r\n      const res = await fetch(\"http://localhost:5500/api/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: text }),\r\n      });\r\n      const data = await res.json();\r\n      const reply = data.reply || \"No response from server\";\r\n\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: \"user\", text },\r\n        { sender: \"bot\", text: reply },\r\n      ]);\r\n    } catch (error) {\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: \"bot\", text: \"Error connecting to server.\" },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n    sendMessage(input);\r\n    setInput(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <>\r\n    <Helmet>\r\n  <title>Chat | EmiBot AI Companion</title>\r\n  <meta name=\"description\" content=\"Chat with our smart AI assistant in real-time.\" />\r\n</Helmet>\r\n    <div\r\n      style={{\r\n        minHeight: \"100vh\",\r\n        padding: \"20px\",\r\n        fontFamily: \"Arial, sans-serif\"\r\n        ,\r\n        backgroundColor:\"black\",\r\n      }}\r\n    >\r\n      {/* Optional: some extra component */}\r\n      <Chat1 />\r\n\r\n      {/* Chat Header with global profile */}\r\n      <Chathead />\r\n\r\n      <h1 style={{color:\"wheat\"}}>Chat with Bot</h1>\r\n\r\n      {/* Chat Messages */}\r\n      <div\r\n        style={{\r\n          border: \"1px solid #ccc\",\r\n          padding: \"10px\",\r\n          height: \"400px\",\r\n          overflowY: \"auto\",\r\n          marginTop: \"20px\",\r\n          borderRadius: \"8px\",\r\n          background:\"white\",\r\n        }}\r\n      >\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent:\r\n                msg.sender === \"user\" ? \"flex-end\" : \"flex-start\",\r\n              margin: \"5px 0\",\r\n            }}\r\n          >\r\n            {msg.sender === \"bot\" && botProfile && (\r\n              <img\r\n                src={botProfile}\r\n                alt=\"Bot\"\r\n                style={{\r\n                  width: \"40px\",\r\n                  height: \"40px\",\r\n                  borderRadius: \"50%\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n              />\r\n            )}\r\n            <div\r\n              style={{\r\n                backgroundColor: msg.sender === \"user\" ? \"#bcbfcfff\" : \"#eee\",\r\n                color: msg.sender === \"user\" ? \"#a96868ff\" : \"#000\",\r\n                padding: \"8px 12px\",\r\n                borderRadius: \"15px\",\r\n                maxWidth: \"70%\",\r\n                wordBreak: \"break-word\",\r\n              }}\r\n            >\r\n              {msg.text}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div ref={chatEndRef} />\r\n      </div>\r\n\r\n      {/* Chat Input */}\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        style={{ marginTop: \"10px\", display: \"flex\" }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type a message...\"\r\n          style={{\r\n            padding: \"10px\",\r\n            flex: 1,\r\n            borderRadius: \"8px\",\r\n            border: \"1px solid #ccc\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n        />\r\n        <button\r\n  type=\"submit\"\r\n  style={{\r\n    padding: \"10px 30px\",\r\n    marginLeft: \"5px\",\r\n\r\n    border: \"none\",\r\n    background: \"#0c3668ff\", // <-- string\r\n    \r\n    color: \"black\",\r\n    cursor: \"pointer\",\r\n    fontFamily: '\"Inter var\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\r\n    fontWeight: 600,\r\n    transition: \"all 0.3s ease\",\r\n  }}\r\n  onMouseEnter={e => (e.target.style.transform = \"translateY(-3px)\")}\r\n  onMouseLeave={e => (e.target.style.transform = \"translateY(0)\")}\r\n>\r\n  Send\r\n</button>\r\n\r\n      </form>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"names":["ChatHead","botProfile","useContext","BotProfileContext","_jsxs","className","style","display","alignItems","gap","marginBottom","children","_jsx","src","alt","width","height","borderRadius","objectFit","color","margin","Chat1","ChatPage","_location$state","selectedAvatarFromHome","useLocation","state","selectedAvatar","setBotProfile","useEffect","input","setInput","useState","messages","setMessages","chatEndRef","useRef","_chatEndRef$current","current","scrollIntoView","behavior","_Fragment","Helmet","name","content","minHeight","padding","fontFamily","backgroundColor","Chathead","border","overflowY","marginTop","background","map","msg","index","justifyContent","sender","marginRight","maxWidth","wordBreak","text","ref","onSubmit","e","preventDefault","trim","async","res","fetch","method","headers","body","JSON","stringify","message","reply","json","prev","error","sendMessage","type","value","onChange","target","placeholder","flex","marginLeft","cursor","fontWeight","transition","onMouseEnter","transform","onMouseLeave"],"sourceRoot":""}