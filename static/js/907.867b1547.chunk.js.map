{"version":3,"file":"static/js/907.867b1547.chunk.js","mappings":"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","sources":["components/VoiceParrotBot/VoiceParrotBot.jsx","api/openai.js","components/Avatar/EmiAvatar.jsx","components/mood/FaceMoodDetector.jsx","pages/EmiFaceMoodPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useGoals } from \"../../context/GoalContext\";\r\nimport { getBotReply } from \"../../api/openai\";\r\nimport bot1 from \"../../assets/bot1.png\";\r\nimport \"./VoiceParrotBot.css\";\r\nimport { db } from \"../../Firebaseconfig\";\r\nimport { collection, addDoc, Timestamp } from \"firebase/firestore\";\r\n\r\nexport default function VoiceParrotBot() {\r\n  const [listening, setListening] = useState(false);\r\n  const [spokenText, setSpokenText] = useState(\"\");\r\n  const [botReply, setBotReply] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\"); // show firebase save status\r\n  const recognitionRef = useRef(null);\r\n  const { addGoal } = useGoals();\r\n\r\n  useEffect(() => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n    if (!SpeechRecognition) {\r\n      alert(\"Your browser does not support Speech Recognition.\");\r\n      return;\r\n    }\r\n\r\n    const recognition = new SpeechRecognition();\r\n    recognition.lang = \"en-US\";\r\n    recognition.continuous = true;\r\n    recognition.interimResults = true;\r\n\r\n    recognition.onresult = (event) => {\r\n      let text = \"\";\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        text += event.results[i][0].transcript;\r\n      }\r\n      setSpokenText(text);\r\n\r\n      if (event.results[event.results.length - 1].isFinal) {\r\n        handleUserSpeech(text);\r\n      }\r\n    };\r\n\r\n    recognition.onend = () => setListening(false);\r\n    recognitionRef.current = recognition;\r\n  }, []);\r\n\r\n  const handleUserSpeech = async (text) => {\r\n    const lower = text.toLowerCase();\r\n\r\n    // Goal tracking\r\n    if (lower.includes(\"i want to\") || lower.includes(\"remind me to\")) {\r\n      addGoal(text);\r\n    }\r\n\r\n    // Get AI reply\r\n    let reply = \"\";\r\n    try {\r\n      reply = await getBotReply(text);\r\n    } catch (err) {\r\n      reply = \"Sorry, I couldn't process that.\";\r\n      console.error(\"OpenAI reply error:\", err);\r\n    }\r\n    setBotReply(reply);\r\n    speakText(reply);\r\n\r\n    // Store conversation in Firebase\r\n    try {\r\n      await addDoc(collection(db, \"conversations\"), {\r\n        user: text,\r\n        bot: reply,\r\n        createdAt: Timestamp.now(),\r\n      });\r\n      setStatus(\"✅ Conversation saved to Firebase!\");\r\n      console.log(\"Conversation saved to Firebase:\", { user: text, bot: reply });\r\n    } catch (error) {\r\n      setStatus(\"❌ Failed to save conversation.\");\r\n      console.error(\"Firebase save error:\", error);\r\n    }\r\n\r\n    setTimeout(() => setStatus(\"\"), 5000); // hide status after 5s\r\n  };\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current) {\r\n      setSpokenText(\"\");\r\n      setBotReply(\"\");\r\n      recognitionRef.current.start();\r\n      setListening(true);\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n      setListening(false);\r\n    }\r\n  };\r\n\r\n  const speakText = (text) => {\r\n    if (!window.speechSynthesis) return;\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.lang = \"en-US\";\r\n    utterance.pitch = 1;\r\n    utterance.rate = 1;\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const stopSpeaking = () => {\r\n    if (window.speechSynthesis) {\r\n      window.speechSynthesis.cancel();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"voice-bot-container\">\r\n      <div className=\"voice-bot-right\">\r\n        <img src={bot1} alt=\"Voice AI\" />\r\n      </div>\r\n      <div className=\"voice-bot-left\">\r\n        <h1>🎙 EmiBot Voice Companion</h1>\r\n        <p>Speak to EmiBot and it will respond intelligently, track your goals, and repeat your voice!</p>\r\n\r\n        <div className=\"voice-buttons\">\r\n          <button\r\n            className={listening ? \"stop-listen-btn\" : \"start-listen-btn\"}\r\n            onClick={listening ? stopListening : startListening}\r\n          >\r\n            {listening ? \"Stop Listening\" : \"Start Listening\"}\r\n          </button>\r\n          <button className=\"stop-speak-btn\" onClick={stopSpeaking}>\r\n            Stop Speaking\r\n          </button>\r\n        </div>\r\n\r\n        {status && <p className=\"firebase-status\">{status}</p>}\r\n\r\n        <div className=\"voice-textbox\">\r\n          <strong>You:</strong>\r\n          <p>{spokenText || \"Say something...\"}</p>\r\n        </div>\r\n\r\n        <div className=\"voice-textbox bot-text\">\r\n          <strong>Bot:</strong>\r\n          <p>{botReply || \"I'll reply here...\"}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// src/api/openai.js\r\nexport async function getBotReply(message) {\r\n  try {\r\n    const res = await fetch(\"http://localhost:5500/api/chat\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ message }),\r\n    });\r\n    const data = await res.json();\r\n    return data.reply;\r\n  } catch (err) {\r\n    console.error(err);\r\n    return \"Sorry, I couldn't think of a reply.\";\r\n  }\r\n}\r\n","// src/components/EmiAvatar.jsx\r\nimport React from \"react\";\r\nimport \"./EmiAvatar.css\"; // create this CSS file\r\n\r\nexport default function EmiAvatar() {\r\n  return (\r\n    <div className=\"emi-avatar\">\r\n      <span className=\"emi-text\">Hi, I am Emi!</span>\r\n    </div>\r\n  );\r\n}\r\n","// src/components/FaceMoodDetector.jsx\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport * as faceapi from \"face-api.js\";\r\nimport { useMood } from \"../../context/MoodContext\";\r\n\r\nexport default function FaceMoodDetector() {\r\n  const videoRef = useRef(null);\r\n  const { mood, setMood } = useMood();\r\n  const [ready, setReady] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const detectionIntervalRef = useRef(null);\r\n  const [modelsLoaded, setModelsLoaded] = useState(false);\r\n\r\n  // 1. Load models only once when component mounts\r\n  useEffect(() => {\r\n    async function loadModels() {\r\n      try {\r\n        await Promise.all([\r\n          faceapi.nets.tinyFaceDetector.loadFromUri(\"/models\"),\r\n          faceapi.nets.faceExpressionNet.loadFromUri(\"/models\"),\r\n        ]);\r\n        setModelsLoaded(true);\r\n      } catch (e) {\r\n        setError(\"Model loading failed\");\r\n        console.error(\"Model error:\", e);\r\n      }\r\n    }\r\n    loadModels();\r\n\r\n    return () => {\r\n      if (detectionIntervalRef.current) clearInterval(detectionIntervalRef.current);\r\n    };\r\n  }, []);\r\n\r\n  // 2. Start camera manually\r\n  async function startCamera() {\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n      setError(\"Camera access not supported in this browser\");\r\n      return;\r\n    }\r\n\r\n    let stream;\r\n    try {\r\n      stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: false,\r\n      });\r\n\r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n        videoRef.current.onloadedmetadata = () => {\r\n          videoRef.current\r\n            .play()\r\n            .catch((e) => console.warn(\"Video play blocked:\", e));\r\n          setReady(true);\r\n          startDetection();\r\n        };\r\n      }\r\n    } catch (e) {\r\n      setError(e?.message || \"Camera error\");\r\n      console.error(\"Camera error:\", e);\r\n    }\r\n  }\r\n\r\n  // 3. Mood detection logic same as before\r\n  function startDetection() {\r\n    if (detectionIntervalRef.current) clearInterval(detectionIntervalRef.current);\r\n\r\n    const options = new faceapi.TinyFaceDetectorOptions({\r\n      inputSize: 224,\r\n      scoreThreshold: 0.5,\r\n    });\r\n\r\n    async function detectFace() {\r\n      const video = videoRef.current;\r\n      if (!video || video.readyState !== 4) return;\r\n\r\n      try {\r\n        const detections = await faceapi\r\n          .detectSingleFace(video, options)\r\n          .withFaceExpressions();\r\n\r\n        if (detections) {\r\n          const exps = detections.expressions;\r\n          const top = Object.keys(exps).reduce((a, b) =>\r\n            exps[a] > exps[b] ? a : b\r\n          );\r\n          setMood(mapExpressionToMood(top));\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Detection error:\", err);\r\n      }\r\n    }\r\n\r\n    detectionIntervalRef.current = setInterval(detectFace, 500);\r\n  }\r\n\r\n  const mapExpressionToMood = (exp) => {\r\n    const map = {\r\n      neutral: { label: \"Neutral\", emoji: \"😐\", background: \"linear-gradient(135deg, #e0e0e0, #f5f5f5)\" },\r\n      happy: { label: \"Happy\", emoji: \"😄\", background: \"linear-gradient(135deg, #141413ff, #ffa751)\" },\r\n      sad: { label: \"Sad\", emoji: \"😢\", background: \"linear-gradient(135deg, #89f7fe, #66a6ff)\" },\r\n      angry: { label: \"Angry\", emoji: \"😠\", background: \"linear-gradient(135deg, #f85032, #e73827)\" },\r\n      fearful: { label: \"Scared\", emoji: \"😨\", background: \"linear-gradient(135deg, #a18cd1, #fbc2eb)\" },\r\n      disgusted: { label: \"Disgusted\", emoji: \"🤢\", background: \"linear-gradient(135deg, #56ab2f, #a8e063)\" },\r\n      surprised: { label: \"Surprised\", emoji: \"😲\", background: \"linear-gradient(135deg, #f7971e, #ffd200)\" },\r\n    };\r\n    return map[exp] || map[\"neutral\"];\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: 360, margin: \"12px auto\" }}>\r\n      {error && <div style={{ color: \"white\" }}>{error}</div>}\r\n\r\n      {/* Start button shown only when models are ready and camera not started */}\r\n      {!ready && modelsLoaded && (\r\n        <button\r\n          onClick={startCamera}\r\n          style={{\r\n            padding: \"10px 20px\",\r\n            fontSize: \"18px\",\r\n            borderRadius: \"8px\",\r\n            border: \"none\",\r\n            cursor: \"pointer\",\r\n            background: \"#ffa751\",\r\n            color: \"#000\",\r\n            marginBottom: \"12px\",\r\n          }}\r\n        >\r\n          Start Camera\r\n        </button>\r\n      )}\r\n\r\n      <div style={{ position: \"relative\" }}>\r\n        <video\r\n          ref={videoRef}\r\n          width={360}\r\n          height={270}\r\n          style={{ borderRadius: 16, display: ready ? \"block\" : \"none\" }}\r\n          muted\r\n          playsInline\r\n        />\r\n        {ready && (\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              top: \"25%\",\r\n              left: \"25%\",\r\n              width: \"60%\",\r\n              height: \"70%\",\r\n              border: \"2px dashed rgba(255,255,255,0.7)\",\r\n              borderRadius: \"50%\",\r\n              pointerEvents: \"none\",\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          textAlign: \"center\",\r\n          opacity: 0.7,\r\n          fontSize: 20,\r\n          marginTop: 8,\r\n          color: \"white\",\r\n        }}\r\n      >\r\n        {ready\r\n          ? \"Align your face inside the circle\"\r\n          : modelsLoaded\r\n          ? \"Click start to enable camera\"\r\n          : \"Loading models…\"}\r\n      </div>\r\n\r\n      {ready && (\r\n        <ul\r\n          style={{\r\n            textAlign: \"center\",\r\n            fontSize: 25,\r\n            color: \"white\",\r\n            marginTop: 4,\r\n            listStyle: \"none\",\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>• Face camera directly</li>\r\n          <li>• Ensure good lighting</li>\r\n          <li>• Hold still briefly</li>\r\n        </ul>\r\n      )}\r\n\r\n      {mood && ready && (\r\n        <div\r\n          style={{\r\n            marginTop: 16,\r\n            padding: 12,\r\n            borderRadius: 12,\r\n            textAlign: \"center\",\r\n            color: \"white\",\r\n            background: mood.background,\r\n            fontSize: 16,\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {mood.emoji} {mood.label}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// src/pages/EmiFaceMoodPage.jsx\r\nimport React from \"react\";\r\nimport EmiAvatar from \"../components/Avatar/EmiAvatar\";\r\nimport FaceMoodDetector from \"../components/mood/FaceMoodDetector\";\r\nimport \"./EmiFaceMoodPage.css\";\r\nimport VoiceParrotBot from \"../components/VoiceParrotBot/VoiceParrotBot\";\r\n\r\nexport default function EmiFaceMoodPage() {\r\n  return (\r\n    <div className=\"emi-face-mood-page\">\r\n      <h2 className=\"page-title\">EmiBot — Face Scan Mood</h2>\r\n      <EmiAvatar />\r\n      <FaceMoodDetector />\r\n      <VoiceParrotBot/>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["VoiceParrotBot","listening","setListening","useState","spokenText","setSpokenText","botReply","setBotReply","status","setStatus","recognitionRef","useRef","addGoal","useGoals","useEffect","SpeechRecognition","window","webkitSpeechRecognition","alert","recognition","lang","continuous","interimResults","onresult","event","text","i","resultIndex","results","length","transcript","isFinal","handleUserSpeech","onend","current","async","lower","toLowerCase","includes","reply","message","res","fetch","method","headers","body","JSON","stringify","json","err","console","error","getBotReply","speakText","addDoc","collection","db","user","bot","createdAt","Timestamp","now","log","setTimeout","speechSynthesis","utterance","SpeechSynthesisUtterance","pitch","rate","speak","_jsxs","className","children","_jsx","src","bot1","alt","onClick","stopListening","stop","startListening","start","stopSpeaking","cancel","EmiAvatar","FaceMoodDetector","videoRef","mood","setMood","useMood","ready","setReady","setError","detectionIntervalRef","modelsLoaded","setModelsLoaded","Promise","all","faceapi","tinyFaceDetector","loadFromUri","faceExpressionNet","e","loadModels","clearInterval","mapExpressionToMood","exp","map","neutral","label","emoji","background","happy","sad","angry","fearful","disgusted","surprised","style","position","width","margin","color","navigator","mediaDevices","getUserMedia","stream","video","audio","srcObject","onloadedmetadata","play","catch","warn","options","inputSize","scoreThreshold","detectFace","readyState","detections","withFaceExpressions","exps","expressions","top","Object","keys","reduce","a","b","setInterval","startDetection","padding","fontSize","borderRadius","border","cursor","marginBottom","ref","height","display","muted","playsInline","left","pointerEvents","textAlign","opacity","marginTop","listStyle","fontWeight","EmiFaceMoodPage"],"sourceRoot":""}